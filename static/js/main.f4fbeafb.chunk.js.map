{"version":3,"sources":["SelectField.js","App.js","index.js"],"names":["SelectField","initial","ratesArray","onSelectChange","currencySymbol","onInputChange","inputId","inputValue","useState","options","setOptions","options_stateless","useEffect","map","pair","index","code","InputGroup","className","Text","Form","Control","type","onChange","value","Select","App","exchangeRateList","setExchangeRateList","stringList","setStringList","filteredList","setFilteredList","showSearchList","setShowSearchList","showClearSearch","setShowClearSearch","searchValue","setSearchValue","fromCurrency","setFromCurrency","fromCurrencySymbol","setFromCurrencySymbol","toCurrency","setToCurrency","toCurrencySymbol","setToCurrencySymbol","toAmount","setToAmount","fromAmount","setFromAmount","isFromActive","setIsFromActive","setRatesArray","exchangeRateList_stateless","stringList_stateless","ratesArray_stateless","a","fetch","response","json","data","Object","entries","rates","base","match","countryData","find","country","currency","symbol","i","length","rate","j","push","name","Math","random","td","props","children","console","log","message","convertedValue","fromRate","toRate","toFixed","document","getElementsByClassName","h1","animate","scale","transition","duration","Container","Row","Col","lg","sm","Alert","variant","e","target","maxLength","token","temp","forEach","string","toLowerCase","includes","onClick","ListGroup","ListGroupItem","Table","striped","hover","responsive","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f4fbeafb.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport { Form, FormControl, InputGroup } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport countryData from './countries.json'\r\n\r\nexport default function SelectField({ initial, ratesArray, onSelectChange, currencySymbol, onInputChange, inputId, inputValue }) {\r\n    const [options, setOptions] = useState([])\r\n    let options_stateless = []\r\n    \r\n    useEffect(() => {\r\n        options_stateless = ratesArray.map((pair, index) => {\r\n            let code = pair[0]\r\n            if(code){\r\n                return <option key={index}>{code}</option>\r\n            }\r\n        })\r\n        setOptions(options_stateless)\r\n        \r\n    }, [ratesArray])\r\n    \r\n    // function onSelectchange(e) {\r\n    //     let value = e.target.value\r\n    //     console.log(value);\r\n    //     setInitVal(value)\r\n    // }\r\n   \r\n    return (\r\n        <InputGroup className='select_field'>\r\n            {/* <img src={`data:image/*;base64,${flag}`} className='flag' /> */}\r\n            <InputGroup.Text className='select_text'>{currencySymbol}</InputGroup.Text>\r\n            <Form.Control type='number' className={`select_input ${inputId}`} onChange={onInputChange} value={inputValue}/>\r\n            <Form.Select onChange={onSelectChange} className='select_select' value={initial} >\r\n                {\r\n                    options\r\n                }\r\n            </Form.Select>\r\n        </InputGroup>\r\n    )\r\n}","import React, { useEffect, useState, useRef } from 'react'\nimport { Alert, Col, Container, Form, FormControl, InputGroup, ListGroup, ListGroupItem, Row, Table, Button } from 'react-bootstrap'\nimport { motion } from 'framer-motion/dist/framer-motion'\nimport { FaSearch, FaFacebook, FaTelegram, FaTwitter, FaMailBulk } from 'react-icons/fa'\nimport { AiOutlineSwap, AiFillMail } from 'react-icons/ai'\nimport SelectField from './SelectField.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport countryData from './countries.json'\n\nconst BASE_URL = 'https://api.exchangerate.host/latest'\n\nexport default function App() {\n    const [exchangeRateList, setExchangeRateList] = useState([])    //array for table data\n    const [stringList, setStringList] = useState([])     // string array of exchange rate data (country, code, rate)\n    const [filteredList, setFilteredList] = useState([])    // filtered search list\n    const [showSearchList, setShowSearchList] = useState(false)     // show or hide search results\n    const [showClearSearch, setShowClearSearch] = useState(false)     // show or hide clear search button\n    const [searchValue, setSearchValue] = useState('')     // \n\n    const [fromCurrency, setFromCurrency] = useState('')    // from currency code\n    const [fromCurrencySymbol, setFromCurrencySymbol] = useState('')  // currency symbol to be passed to 'from select field' \n    const [toCurrency, setToCurrency] = useState('')    // to currency code\n    const [toCurrencySymbol, setToCurrencySymbol] = useState('')  // currency symbol to be passed to 'to select field'  \n\n    let [toAmount, setToAmount] = useState()\n    let [fromAmount, setFromAmount] = useState()\n\n    let [isFromActive, setIsFromActive] = useState(false)\n\n    const [ratesArray, setRatesArray] = useState([])\n\n    let exchangeRateList_stateless = [] // temp exchange rate list\n    let stringList_stateless = []   // temp string array of exchange rate data (country, code, rate)\n    let ratesArray_stateless = []     // data.rates array (an array of arrays) with key value pairs\n\n    // initial setup to fecth latest exchange rates\n    useEffect(async () => {\n        try {\n            const response = await fetch('https://api.exchangerate.host/latest')\n            const data = await response.json()\n            ratesArray_stateless = Object.entries(data.rates)\n            setRatesArray(ratesArray_stateless)\n            // console.log(data);\n\n            setFromCurrency(data.base)\n            setToCurrency(ratesArray_stateless[0][0])\n\n            let match = countryData.find(country => country.currency.code === data.base)\n            if (match) {\n                setFromCurrencySymbol(match.currency.symbol)\n            }\n            match = countryData.find(country => country.currency.code === ratesArray_stateless[0][0])\n            if (match) {\n                setToCurrencySymbol(match.currency.symbol)\n            }\n\n            for (let i = 0; i < ratesArray_stateless.length; i++) {\n                let code = ratesArray_stateless[i][0]\n                let rate = ratesArray_stateless[i][1]\n                for (let j = 0; j < countryData.length; j++) {\n                    let country = countryData[j]\n                    if (country.currency.code === code) {\n                        exchangeRateList_stateless.push(\n                            <tr key={Math.random()}>\n                                <td>{country.name}</td>\n                                <td>{code}</td>\n                                <td>{rate}</td>\n                            </tr>\n                        )\n                    }\n                }\n            }\n            setExchangeRateList(exchangeRateList_stateless)\n            // console.log(exchangeRateList_stateless);\n\n            // populate string list with exchange rate data (country - code | rate)\n            for (let i = 0; i < exchangeRateList_stateless.length; i++) {\n                let td = exchangeRateList_stateless[i]\n                if (td) {\n                    let country = td.props.children[0].props.children\n                    let code = td.props.children[1].props.children\n                    let rate = td.props.children[2].props.children\n                    stringList_stateless.push(`${country} - ${code} | ${rate}`)\n                }\n            }\n            setStringList(stringList_stateless)\n\n        }\n        catch (err) { console.log(err.message) }\n    }, [])\n\n    // update input fields when amounts or currency values change\n    useEffect(() => {\n        let fromRate = ratesArray.find(pair => pair[0] === fromCurrency)\n        let toRate = ratesArray.find(pair => pair[0] === toCurrency)\n        if (fromRate && toRate) {\n            fromRate = fromRate[1]\n            toRate = toRate[1]\n        }\n        let convertedValue;\n        if (isFromActive) {   // if true, changes were made to 'from field' so update 'to field'\n            convertedValue = (fromAmount * toRate / fromRate).toFixed(4)\n            document.getElementsByClassName('1')[0].value = convertedValue\n        }\n        else {\n            convertedValue = (toAmount * fromRate / toRate).toFixed(4)\n            document.getElementsByClassName('0')[0].value = convertedValue\n        }\n\n    }, [fromAmount, toAmount, fromCurrency, toCurrency])\n    // end\n\n    // filter rates based on search\n    function handleSearch(e) {\n        let token = e.target.value\n        setSearchValue(token)\n        if (token.length === 0) {\n            setShowSearchList(false)\n            setShowClearSearch(false)\n        }\n        else {\n            setShowSearchList(true)\n            setShowClearSearch(true)\n        }\n\n        let temp = []\n        stringList.forEach(string => {\n            if (string.toLowerCase().includes(token.toLowerCase())) {\n                temp.push(string)\n            }\n        })\n        setFilteredList(temp)\n    } // end\n\n    /* HANDLE COUNTRY CODE AND CURRENCY SYMBOL UPDATES WHEN SELECT FIELDS VALUES CHANGE*/\n    function onFromSelectChange(e) {\n        let value = e.target.value\n        setFromCurrency(value)\n        let match = countryData.find(country => country.currency.code === value)\n        if (match)\n            setFromCurrencySymbol(match.currency.symbol)\n    }\n\n    function onToSelectChange(e) {\n        let value = e.target.value\n        setToCurrency(value)\n        let match = countryData.find(country => country.currency.code === value)\n        if (match)\n            setToCurrencySymbol(match.currency.symbol)\n    }\n\n    function onFromInputChange(e) {\n        setIsFromActive(true)\n        setFromAmount(e.target.value)\n    }\n\n    function onToInputChange(e) {\n        setIsFromActive(false)\n        setToAmount(e.target.value)\n    }\n    /* END */\n\n    return (\n        <div className='App'>\n            <div className='navbar'>\n                <AiOutlineSwap className='exchange_icon' />\n                <motion.h1\n                    animate={{ scale: [0, 1] }}\n                    transition={{ duration: 0.7 }}\n                >\n                    Currency Converter\n                </motion.h1>\n            </div>\n            <div>\n                <Container className='body_container'>\n                    <Row>\n                        <Col lg={7} sm={12} className='convert_container'>\n                            <Alert variant='success' className='convert_alert'>Convert Currency</Alert>\n                            <SelectField initial={fromCurrency}\n                                ratesArray={ratesArray}\n                                onSelectChange={onFromSelectChange}\n                                onInputChange={onFromInputChange}\n                                currencySymbol={fromCurrencySymbol}\n                                inputId='0'\n                                inputValue={fromAmount} />\n                            <SelectField initial={toCurrency}\n                                ratesArray={ratesArray}\n                                onSelectChange={onToSelectChange}\n                                onInputChange={onToInputChange}\n                                currencySymbol={toCurrencySymbol}\n                                inputId='1'\n                                inputValue={toAmount} />\n                        </Col>\n                        <Col lg={5} sm={12} className='exchange_rates'>\n                            <div className='rates_label'>Current Exchange Rates</div>\n                            <div className='search_div'>\n                                <Form.Control type='text' value={searchValue} maxLength='25' className='search_box' onChange={handleSearch} />\n                                {showClearSearch ? <div className='clear_search' onClick={() => {setSearchValue(''); setShowSearchList(false); setShowClearSearch(false)}}>x</div>\n                                                 : ''\n                                }\n                                <FaSearch className='search_icon' />\n                                {showSearchList ?\n                                    <ListGroup className='search_list'>\n                                        {\n                                            filteredList.map((string, index) => {\n                                                return (<ListGroupItem key={index} className='search_list_item'>{string}</ListGroupItem>)\n                                            })\n                                        }\n                                    </ListGroup>\n                                    : ''\n                                }\n                            </div>\n                            <div className='rates_list'>\n                                {/* Populate rates data (country, code, exchange rate) into table*/}\n                                <Table striped hover responsive='sm' className='table'>\n                                    <thead>\n                                        <tr>\n                                            <td>Country</td>\n                                            <td>Code</td>\n                                            <td>Rate</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            exchangeRateList\n                                        }\n                                    </tbody>\n                                </Table>\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <div className='footer'>\n                <Container>\n                    <Row>\n                        <Col className='footer_text'>Have any suggestions to improve the site ? Please reach out on </Col>\n                    </Row>\n                    <Row>\n                        <Col lg={6} className='icon_container'>\n                            <a href='https://m.facebook.com/jerome.akumasi'><FaFacebook className='social_icon' /></a>\n                            <a href='https://twitter.com/jrme21445768'><FaTwitter className='social_icon' /></a>\n                            <a href='https://t.me/jaakumasi'><FaTelegram className='social_icon' /></a>\n                            <a href='mailto:jeromeakumasi01@gmail.com' target='_blank'><FaMailBulk className='social_icon' /></a>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}